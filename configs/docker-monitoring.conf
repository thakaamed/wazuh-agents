<!-- ========================================================================
     ThakaaMed Docker Monitoring Configuration Template
     ========================================================================
     
     This configuration file enables comprehensive Docker monitoring for
     Wazuh agents. It's like giving your Wazuh agent X-ray vision for
     containers! 🔍
     
     Features:
     - Container log collection
     - Docker events monitoring  
     - Container health checks
     - Security event detection
     - Performance monitoring
     
     Usage:
     Copy this file to: /var/ossec/etc/ossec.conf.d/docker-monitoring.conf
     
     ======================================================================== -->

<ossec_config>
  <!-- ====================================================================
       DOCKER CONTAINER LOG COLLECTION
       ====================================================================
       
       Collects logs from all Docker containers using the JSON log driver.
       This is the bread and butter of Docker monitoring! 🍞🧈
       ==================================================================== -->
  
  <!-- Container logs via JSON driver (the main event) -->
  <localfile>
    <log_format>docker</log_format>
    <location>/var/lib/docker/containers/*/*-json.log</location>
  </localfile>
  
  <!-- Docker daemon logs (because the daemon knows all) -->
  <localfile>
    <log_format>syslog</log_format>
    <location>/var/log/docker.log</location>
  </localfile>
  
  <!-- Docker systemd service logs -->
  <localfile>
    <log_format>command</log_format>
    <command>journalctl -u docker.service --since "1 minute ago" --output json --no-pager | head -100</command>
    <frequency>60</frequency>
  </localfile>

  <!-- ====================================================================
       DOCKER EVENTS MONITORING
       ====================================================================
       
       Monitors Docker events like container start/stop, image pulls, etc.
       It's like having a security camera for your containers! 📹
       ==================================================================== -->
       
  <localfile>
    <log_format>command</log_format>
    <command>timeout 30 docker events --format '{"time":"{{.Time}}","action":"{{.Action}}","type":"{{.Type}}","actor":{{json .Actor}},"host":"'$(hostname)'"}' --since 30s 2>/dev/null || echo '{"error":"docker_events_timeout","host":"'$(hostname)'"}'</command>
    <frequency>60</frequency>
  </localfile>
  
  <!-- ====================================================================
       CONTAINER HEALTH MONITORING
       ====================================================================
       
       Regular health checks on all containers. Because containers lie
       about being healthy sometimes! 🤥
       ==================================================================== -->
       
  <!-- Container status monitoring -->
  <localfile>
    <log_format>command</log_format>
    <command>docker ps --format '{"container":"{{.Names}}","status":"{{.Status}}","image":"{{.Image}}","created":"{{.CreatedAt}}","ports":"{{.Ports}}","size":"{{.Size}}"}' 2>/dev/null | jq -s '{"containers":.,"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","host":"'$(hostname)'"}'</command>
    <frequency>300</frequency>
  </localfile>
  
  <!-- Container resource usage -->
  <localfile>
    <log_format>command</log_format>
    <command>docker stats --no-stream --format '{"container":"{{.Name}}","cpu":"{{.CPUPerc}}","memory":"{{.MemUsage}}","net_io":"{{.NetIO}}","block_io":"{{.BlockIO}}","pids":"{{.PIDs}}"}' 2>/dev/null | jq -s '{"container_stats":.,"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","host":"'$(hostname)'"}'</command>
    <frequency>120</frequency>
  </localfile>
  
  <!-- ====================================================================
       DOCKER SECURITY MONITORING
       ====================================================================
       
       Security-focused monitoring for suspicious Docker activities.
       Paranoia mode: ENABLED! 🕵️‍♂️
       ==================================================================== -->
       
  <!-- Monitor Docker daemon security events -->
  <localfile>
    <log_format>command</log_format>
    <command>docker events --filter event=start --filter event=stop --filter event=die --filter event=kill --format '{"timestamp":"{{.Time}}","action":"{{.Action}}","container":"{{.Actor.Attributes.name}}","image":"{{.Actor.Attributes.image}}","security_event":true,"host":"'$(hostname)'"}' --since 30s 2>/dev/null | head -10</command>
    <frequency>30</frequency>
  </localfile>
  
  <!-- Monitor privileged containers (because privilege is dangerous) -->
  <localfile>
    <log_format>command</log_format>
    <command>docker ps --filter "label=privileged=true" --format '{"privileged_container":"{{.Names}}","image":"{{.Image}}","status":"{{.Status}}","security_risk":"high","timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","host":"'$(hostname)'"}' 2>/dev/null</command>
    <frequency>600</frequency>
  </localfile>
  
  <!-- ====================================================================
       DOCKER NETWORK MONITORING
       ====================================================================
       
       Monitor Docker networks for suspicious activities.
       Because containers talk to each other! 🗣️
       ==================================================================== -->
       
  <!-- Docker network information -->
  <localfile>
    <log_format>command</log_format>
    <command>docker network ls --format '{"network":"{{.Name}}","driver":"{{.Driver}}","scope":"{{.Scope}}"}' 2>/dev/null | jq -s '{"networks":.,"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","host":"'$(hostname)'"}'</command>
    <frequency>3600</frequency>
  </localfile>
  
  <!-- ====================================================================
       DOCKER VOLUME MONITORING
       ====================================================================
       
       Monitor Docker volumes for data persistence tracking.
       Data is precious! 💎
       ==================================================================== -->
       
  <localfile>
    <log_format>command</log_format>
    <command>docker volume ls --format '{"volume":"{{.Name}}","driver":"{{.Driver}}"}' 2>/dev/null | jq -s '{"volumes":.,"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","host":"'$(hostname)'"}'</command>
    <frequency>3600</frequency>
  </localfile>
  
  <!-- ====================================================================
       DOCKER IMAGE MONITORING
       ====================================================================
       
       Monitor Docker images for security and compliance.
       Know what's running on your system! 🖼️
       ==================================================================== -->
       
  <!-- Docker image inventory -->
  <localfile>
    <log_format>command</log_format>
    <command>docker images --format '{"repository":"{{.Repository}}","tag":"{{.Tag}}","image_id":"{{.ID}}","created":"{{.CreatedSince}}","size":"{{.Size}}"}' 2>/dev/null | jq -s '{"images":.,"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","host":"'$(hostname)'"}'</command>
    <frequency>3600</frequency>
  </localfile>
  
  <!-- ====================================================================
       MEDICAL-SPECIFIC MONITORING
       ====================================================================
       
       Special monitoring for medical applications and HIPAA compliance.
       Because patient data is sacred! 🏥
       ==================================================================== -->
       
  <!-- Monitor medical containers (identified by labels or names) -->
  <localfile>
    <log_format>command</log_format>
    <command>docker ps --filter "label=medical=true" --format '{"medical_container":"{{.Names}}","image":"{{.Image}}","status":"{{.Status}}","ports":"{{.Ports}}","hipaa_compliance":true,"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","host":"'$(hostname)'"}' 2>/dev/null</command>
    <frequency>300</frequency>
  </localfile>
  
  <!-- Monitor containers with healthcare-related names -->
  <localfile>
    <log_format>command</log_format>
    <command>docker ps --format '{{.Names}}' | grep -iE '(medical|health|patient|dicom|hospital|clinic)' | while read container; do echo '{"healthcare_container":"'$container'","monitoring":"active","compliance":"hipaa","timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","host":"'$(hostname)'"}'; done</command>
    <frequency>600</frequency>
  </localfile>
</ossec_config>

<!-- ========================================================================
     CONFIGURATION NOTES
     ========================================================================
     
     🔧 Frequency Settings:
     - 30s:  Critical security events
     - 60s:  Docker events and system logs  
     - 120s: Resource usage stats
     - 300s: Container health and medical monitoring
     - 600s: Security scans and healthcare containers
     - 3600s: Infrastructure inventory (networks, volumes, images)
     
     🛡️ Security Considerations:
     - All commands include error handling with timeout
     - Medical container monitoring for HIPAA compliance
     - Privileged container detection for security risks
     - Resource monitoring to detect anomalies
     
     📊 Log Volume:
     - This configuration generates moderate log volume
     - Adjust frequencies based on your monitoring needs
     - Consider log rotation and storage capacity
     
     🚨 Troubleshooting:
     - If commands fail, check Docker daemon status
     - Ensure Wazuh agent has permissions to run Docker commands
     - Monitor /var/ossec/logs/ossec.log for errors
     
     💡 Customization Tips:
     - Add your own medical container labels
     - Adjust frequencies based on criticality
     - Add custom filters for your specific use case
     - Consider adding compliance-specific monitoring
     
     ======================================================================== --> 